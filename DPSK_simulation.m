% -------------------------------------------------------------------------
% Difference Phase Shift Keying (DPSK) Modulation simulator. This program
% uses a randomly generated binary array ('data') and transforms it into a
% sinusoidal signal, with the carrier frequency 'fc' matching the size of
% the bits in time domain. The modulated signal is generated by taking the
% carrier signal and introducing a phase shift of \pi every time the data
% changes from 1 to 0 or vice-versa. The phase-modulated signal is then 
% subtracted from the carrier signal to obtain a 'pulsed' sinusoid, which
% is flat everywhere there is a 0 in the digital signal.
%
% The digital signal information can then be retrived directly from the
% phase of the difference signal.
% 
% Author: Oscar A. Nieves
% Last update: 27/02/2021
% -------------------------------------------------------------------------
clear all; close all; clc;

%% --- Inputs --- %%
% Signal properties
tf = 10;    % Signal duration (s)
A = 3;      % Signal amplitude

% Data
data_bits = 16;

% Calculated parameters
data = randi([0 1],data_bits,1).'; % binary string for data input
Nt = 2.^nextpow2(100*data_bits);   % Time grid resolution
fc = 1/(tf/data_bits);      % Carrier frequency (Hz)
Tc = 1/fc;                  % Carrier period (s)
t = linspace(0,tf,Nt);      % time array
dt = abs(t(2)-t(1));        % step-size
assert(dt < Tc);            % verify time resolution

%% --- Calculations --- %%
% Signals
Digital_signal = BinaryTrain(t,data);
carrier_wave = A*sin(2*pi*fc*t);
modulated_wave = A*sin(2*pi*fc*t + pi*Digital_signal);
difference_wave = modulated_wave - carrier_wave;
angle_differential = angle(-abs(difference_wave));

%% --- Plots --- %%
fontS = 16;
FS = '\fontname{Palatino} ';
LW = 3;
colors = {'black','#D95319','#0072BD','#77AC30'};

% Plots
close all;
figure('units','normalized','outerposition',[0.25 0 0.75 1]);
set(gcf,'color','w');

subplot(411);
plot(t,Digital_signal,'color',colors{1},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS 'Digital Signal']);
axis tight;
yticks([0,1]);
yticklabels({'0','1'})
set(gca,'FontSize',fontS);

subplot(412);
plot(t,carrier_wave,'color',colors{2},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS 'Carrier Wave']);
axis tight;
set(gca,'FontSize',fontS);

subplot(413);
plot(t,modulated_wave,'color',colors{3},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS 'Modulated Wave']);
axis tight; grid on;
set(gca,'FontSize',fontS);

subplot(414);
plot(t,difference_wave,'color',colors{4},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS 'Difference Wave']);
axis tight; grid on;
set(gca,'FontSize',fontS);

figure('units','normalized','outerposition',[0.25 0 0.75 1]);
set(gcf,'color','w');
subplot(311);
plot(t,abs(difference_wave),'color',colors{4},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS '|Difference Wave|']);
axis tight; grid on;
set(gca,'FontSize',fontS);

subplot(312);
plot(t,angle_differential,'color',colors{4},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS 'Phase (rad)']);
ylim(1.1*[0,pi]);
yticks([0,pi]);
yticklabels({'0','+\pi'});
grid on;
set(gca,'FontSize',fontS);

subplot(313);
plot(t,Digital_signal,'color',colors{1},'LineWidth',LW);
xlabel([FS 'time (s)']);
ylabel([FS 'Digital Signal']);
axis tight;
yticks([0,1]);
yticklabels({'0','1'})
set(gca,'FontSize',fontS);

%% --- Functions --- %%
% Binary train: creates an array of the same size as the input time array t
% and transforms the binary 'data' into a set of rectangular pulses of
% heigh 1 or 0 accordingly.
function Digital_signal = BinaryTrain(t,data)
Nt = length(t);
L = length(data);
Digital_signal = nan(size(t));
for n = 1:L
    if data(n) == 1
        Digital_signal((n-1)*floor(Nt/L)+1:n*floor(Nt/L)) = 1;
    elseif data(n) == 0
        Digital_signal((n-1)*floor(Nt/L)+1:n*floor(Nt/L)) = 0;
    end
end
end